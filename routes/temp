
    async.waterfall([
        (callback) => {
            db.Competition.findById(req.body.id, (err, found) => { 
                if(err)
                    return res.status(400).json(err);

                check = _.uniq(group.arbiters, (elem) => {
                    return elem; 
                });
                if(group.arbiters.length !== found.meta.arbitersCount){
                    return res.status(400).json({message:'Grupa musi mieć ' + found.meta.arbitersCount + '!', fail: group, typeErr: 'arbiters'});
                }
                
                callback(null, found);
            });
        },
        (comp, callback) => {
            db.Competition.find({
                'meta.startDate': comp.meta.startDate
            }, 'startList', (err, comps) => {

                let arbComps = [];
                comps.forEach((comp) => {
                    comp.startList.groups.forEach((group) => {
                        arbComps = arbComps.concat(group.arbiters); 
                    });
                });
                
                callback(null, arbComps);
            });
        },
        (arbComps, callback) => {
            db.User.find({'role' : 'arbiter'}, (err, arbiters) => {

                let availArb = _.filter(arbiters, (arb) => {
                    return !_.find(arbComps, (arbComp) =>{
                        return arb._id.toString() === arbComp.toString();
                    });
                });

                if(availArb.length < 5){
                    return res.status(400).send("Liczba dostępnych sedziów w tym dniu wynosi " + availArb.length + '!');
                }
                else{ 
                    
                }
            });
        }]);